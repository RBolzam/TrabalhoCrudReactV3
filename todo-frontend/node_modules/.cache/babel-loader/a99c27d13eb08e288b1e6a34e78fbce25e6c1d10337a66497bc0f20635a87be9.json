{"ast":null,"code":"/**\r\n * Decodifica o payload de um token JWT (JSON Web Token)\r\n * \r\n * @param {string} token - Token JWT no formato \"header.payload.signature\"\r\n * @returns {object} Objeto JavaScript contendo os dados decodificados do payload\r\n *                   ou um objeto vazio em caso de erro\r\n * \r\n * Funcionamento:\r\n * 1. Divide o token em 3 partes usando o separador '.' (ponto)\r\n * 2. Seleciona a segunda parte (payload) - índice 1\r\n * 3. Decodifica a string Base64 para uma string UTF-8\r\n * 4. Converte a string JSON resultante em objeto JavaScript\r\n * \r\n * Importante: Esta função apenas decodifica, NÃO VERIFICA a autenticidade do token!\r\n * A validação da assinatura deve sempre ser feita no servidor.\r\n */\nexport function parseJwt(token) {\n  try {\n    // Passo 1: Divide o token em partes [header, payload, signature]\n    // Passo 2: Seleciona o payload (segunda parte - índice 1)\n    // Passo 3: Decodifica de Base64 para string\n    // Passo 4: Converte a string JSON em objeto JavaScript\n    return JSON.parse(atob(token.split('.')[1]));\n  } catch (error) {\n    // Retorna objeto vazio em caso de:\n    // - Token malformado (não tem 3 partes)\n    // - Decodificação Base64 falhar\n    // - JSON inválido\n    return {};\n  }\n}","map":{"version":3,"names":["parseJwt","token","JSON","parse","atob","split","error"],"sources":["C:/Users/Rafab/Downloads/Estudo/FemaV3/Ano3/TopTec/TrabalhoCrudReactV2/todo-frontend/src/components/Auth.js"],"sourcesContent":["/**\r\n * Decodifica o payload de um token JWT (JSON Web Token)\r\n * \r\n * @param {string} token - Token JWT no formato \"header.payload.signature\"\r\n * @returns {object} Objeto JavaScript contendo os dados decodificados do payload\r\n *                   ou um objeto vazio em caso de erro\r\n * \r\n * Funcionamento:\r\n * 1. Divide o token em 3 partes usando o separador '.' (ponto)\r\n * 2. Seleciona a segunda parte (payload) - índice 1\r\n * 3. Decodifica a string Base64 para uma string UTF-8\r\n * 4. Converte a string JSON resultante em objeto JavaScript\r\n * \r\n * Importante: Esta função apenas decodifica, NÃO VERIFICA a autenticidade do token!\r\n * A validação da assinatura deve sempre ser feita no servidor.\r\n */\r\nexport function parseJwt(token) {\r\n  try {\r\n    // Passo 1: Divide o token em partes [header, payload, signature]\r\n    // Passo 2: Seleciona o payload (segunda parte - índice 1)\r\n    // Passo 3: Decodifica de Base64 para string\r\n    // Passo 4: Converte a string JSON em objeto JavaScript\r\n    return JSON.parse(atob(token.split('.')[1]));\r\n    \r\n  } catch (error) {\r\n    // Retorna objeto vazio em caso de:\r\n    // - Token malformado (não tem 3 partes)\r\n    // - Decodificação Base64 falhar\r\n    // - JSON inválido\r\n    return {};\r\n  }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAQA,CAACC,KAAK,EAAE;EAC9B,IAAI;IACF;IACA;IACA;IACA;IACA,OAAOC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAE9C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA;IACA;IACA;IACA,OAAO,CAAC,CAAC;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}